MODULE - III
---------------
React
-------
- React is a popular open-source web application library.
- built and maintained by facebook.

Features of React
----------
1) used to built frontend(UI)
2) react is based on js
3) used to  built SPA(Single page Application) - only one page loads into browser(index.html)
4) Declarative Application - directly not alter DOM
  - VDOM - VIRTUAL DOM - Created by react
      -virtual DOM is a copy of real DOM
      -diffing Algorithm - used to compare the virtual DOM with real DOM
      -reconcillation - updation of real DOM as per virtual DOM
      -entire application will not re-render with each modification.
5) react use pure function - functions output only depend on arguments.
6) language - JSX -its a combination of JS and  HTML 
        -JSX is not a browser understanding language
7) transpiling - Bebel library - converts JSX into browser understanding languages-this process of conversion is called transpliling
8) data sharing - unidirectional - parent-child - with the help of props
                 - props - predefined object


STEPS TO CREATE A APPLICATION.
--------------------------
- New project -  npx create-react-app projectname
  npx means node package excecutor -used to execute node based application  - this is outdated
  
  -npm create vite@latest projectname - new command
  -cd projectname
  -code .
  -npm install -
  -script tag edit - to open the application in default browser
  -npm run dev - to run the application


  files
  ------
  1) README.md - document related to application - this file will not run
  2) package.json - it holds the npm configuration
       -dependencies - holds the name of the packages installed to the application.
  3) package-lock.json - holds the versions and some important informations regarding the installed libraries.
  4) node_modules - it contains the copy of the installed libraries
  5) .gitignore - name of the files that are not added to git.
  6) vite.config.js - vite configuration
  7) eslint.config.js - linking refers to the process of analysing code to find and fix problems such as bugs, potential errors.
  8) index.html -
  9) main.js - app root component
  10) App.js - root component
  11) index.css - global style
  12) app.css - styles applied only to app components
  13) public assets - media contents


  component : basic unit of react UI
    - export - export default componentname
    - import - import variable from 'path'
    - <componentname/>
    - js code should be placed above the return function call
    - html code should be placed inside the return function

 HTML
 -----
 - all html content should be inside a single tag
 - even a html fragment <> </>
 - must be placed inside return function

 css
 ----
1) inline
      -style should be given as object
      -syntax => style={{property:'value';}}
      -properties with more one word must be written in camelcase - backgroundColor:'yellow'
2) external
      - external file with extension as filename.css
      - link - import statement
3) css modules
      - create an external file with extension as .module.css (eg: filename.module.css)
      - it should be Created inside src folder
      - it can be used anywhere in the project by importing this file.
      - file will be stored into a variable while importing this file.
      - styling is done with the help of this variable.

inline - particular tag
component.css - for a particular component
module.css - can be used for more than one component
index.css - can be used in entire application

JS
-----
- to place a js content in jsx - that content must be placed inside a curly bracket.

  functions with Arguments
  - should call as call back function
      syntax
      -------
      ()=>{
        functionname(arg)
      }

  Functions without Arguments
  - while calling the function - name of the function is only used.


  components in react
  --------------------
     rules to create components
     ---------------------------
     1) components name must start with capital letter.
     2) extension can be js or jsx
  1. Functional Component  // called as stateless components
     syntax
     -------
     import React from 'react'                   /// for loading structure in vs code - rfce

     function Example() {
      return (
    <div>Example</div>
  )
}

export default Example

      object destructuring - for calling only one item we dont need to 
      
  2. Class Component   // called as statefull components
    syntax
    --------
       import React, { Component } from 'react'                  // for loading structure in vs code - rcc

       export default class Random extends Component {
      render() {
      return (
      <div>Random</div>
    )
  }
}


note: the created component should be connected with the root component inorder to display, it can be direct or indirect connection

Object destructuring

Conditional Rendering
----------------------
1) ternary operator  :condition?true:false
2) truthy operator   :condition && true

 state
 ------
 - its a predefined object to store data
 - state is only present in class component by default
 - when a data is changed in the state the entire component re-renders.
 - in order to change the data in the state - call setState() method.

 Life cycle of class component
-----------------------------
1) Mounting Phase - component is added to the DOM
   - constructor() - Initialize the state in the class
   - getDerivedStateFromProps() - It modifies the state with the values of props
                                - It returns an object - State update
                                - If it returns null - no state updation
   - render() - return jsx which is the output of the component that need to be displayed in the browser.
   - componentDidMount() - network request -api call 

2) Updating Phase - Editing of the component.
   -getDerivedStateFromProps () - It modifies the state with the values of props
                                - It returns an object - State update
                                - If it returns null - no state updation
   -shouldComponentUpdate() - return true or false
   - render() - return jsx which is the output of the component that need to be displayed in the browser.
   - getSnapShotBeforeUpdate() - it invoke just before the DOM is updated with values from VDOM - to store information of the DOM
   - componentDidUpdate() - invoke after the updation in the DOM . excecute any further side effect(api).
3) Unmounting Phase - Removing the component from the DOM
   - componentWillUnmount() - it breaks the network calls and clear the DOM
4) Error Handling Phase () 
   - getDerivedStateFromError()  - error UI
   componentDidCatch() - log

   HOOKS
   ------
   -Are Functions that allows developers to use state and life cycle features in functional components


   -types of HOOKS
   ----------------
    1) predefined Hooks
      eg; useState(),useEffect(),useRef(),useContext()  etc
    2) custom Hooks


    Rules to use HOOKS
    ---------------------
    1) import Hooks at the top of the functional components
    2) Hooks should be called at the top portion of the inside the function
    3) cannot invoke Hooks conditionally.



    useState()
    const [state,fnstate] = useState()